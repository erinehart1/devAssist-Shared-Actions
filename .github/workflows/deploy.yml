name: Deploy Metadata and Stamp CMDT

on:
  workflow_call:
    secrets:
      SF_USERNAME:
        required: true
      SF_CONSUMER_KEY:
        required: true
      SF_JWT_KEY:
        required: true
      SLACK_WEBHOOK_URL:
        required: false

jobs:
  deploy:
    name: Deploy to Salesforce
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Salesforce CLI
        uses: sfdx-actions/setup-sfdx@v1

      - name: Write JWT key to file
        run: echo "$SF_JWT_KEY" | base64 --decode > server.key
        env:
          SF_JWT_KEY: ${{ secrets.SF_JWT_KEY }}

      - name: Decode JWT and log payload
        run: |
          IFS='.' read -r header payload signature <<< "${UNSIGNED}.${SIGNATURE}"
          echo "$payload" | base64 -d | jq .

      - name: Generate JWT manually
        id: generate-jwt
        env:
          SF_JWT_KEY: ${{ secrets.SF_JWT_KEY }}
          SF_CLIENT_ID: ${{ secrets.SF_CLIENT_ID }}
          SF_USERNAME: ${{ secrets.SF_USERNAME }}
        run: |
          echo "$SF_JWT_KEY" | base64 --decode > server.key

          HEADER=$(echo -n '{"alg":"RS256","typ":"JWT"}' | openssl base64 -e | tr -d '=' | tr '/+' '_-' | tr -d '\n')
          NOW=$(date +%s)
          EXP=$((NOW + 300)) # 5 min expiration
          CLAIM=$(echo -n "{\"iss\":\"$SF_CLIENT_ID\",\"sub\":\"$SF_USERNAME\",\"aud\":\"https://test.salesforce.com\",\"exp\":$EXP}" | openssl base64 -e | tr -d '=' | tr '/+' '_-' | tr -d '\n')
          UNSIGNED="${HEADER}.${CLAIM}"
          SIGNATURE=$(echo -n "$UNSIGNED" | openssl dgst -sha256 -sign server.key | openssl base64 -e | tr -d '=' | tr '/+' '_-' | tr -d '\n')

          echo "JWT Token: ${UNSIGNED}.${SIGNATURE}"

          echo "Decoded JWT Payload:"
          echo "$CLAIM" | base64 -d | jq .

          # ✅ Validate audience claim
          if ! echo "$CLAIM" | base64 -d | jq -r .aud | grep -q "https://test.salesforce.com"; then
            echo "❌ Error: JWT 'aud' claim must be https://test.salesforce.com"
            exit 1
          fi

      - name: Authenticate with JWT via manual HTTP POST
        env:
          SF_JWT_KEY: ${{ secrets.SF_JWT_KEY }}
          SF_CLIENT_ID: ${{ secrets.SF_CLIENT_ID }}
          SF_USERNAME: ${{ secrets.SF_USERNAME }}
        run: |
          echo "$SF_JWT_KEY" | base64 --decode > server.key

          # Create JWT header and claim
          HEADER=$(echo -n '{"alg":"RS256","typ":"JWT"}' | openssl base64 -e | tr -d '=' | tr '/+' '_-' | tr -d '\n')
          NOW=$(date +%s)
          EXP=$((NOW + 300))
          CLAIM=$(echo -n "{\"iss\":\"$SF_CLIENT_ID\",\"sub\":\"$SF_USERNAME\",\"aud\":\"https://test.salesforce.com\",\"exp\":$EXP}" | openssl base64 -e | tr -d '=' | tr '/+' '_-' | tr -d '\n')
          UNSIGNED="${HEADER}.${CLAIM}"
          SIGNATURE=$(echo -n "$UNSIGNED" | openssl dgst -sha256 -sign server.key | openssl base64 -e | tr -d '=' | tr '/+' '_-' | tr -d '\n')
          JWT="${UNSIGNED}.${SIGNATURE}"

          echo "Posting JWT manually to https://test.salesforce.com/services/oauth2/token"
          RESPONSE=$(curl -s -X POST https://test.salesforce.com/services/oauth2/token \
            -d "grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer" \
            -d "assertion=$JWT")

          echo "$RESPONSE" | jq .

          # Optional: Export access token to use downstream
          echo "ACCESS_TOKEN=$(echo $RESPONSE | jq -r .access_token)" >> $GITHUB_ENV

      - name: Remove named credential before deploy
        run: rm -f force-app/main/default/namedCredentials/Cloudflare_GitHub_Proxy.namedCredential-meta.xml

      - name: Deploy metadata
        run: sfdx force:source:deploy -p force-app -u ${{ secrets.SF_USERNAME }} --json --loglevel fatal

      - name: Create DevAssist CMDT records
        run: |
          node .github/scripts/create-current-cmdt.js
          node .github/scripts/create-history-cmdt.js

  notify:
    name: Notify on failure
    needs: deploy
    runs-on: ubuntu-latest
    if: failure()

    steps:
      - name: Send Slack alert (example)
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "🚨 DevAssist deploy failed in GitHub Actions. Check the logs."
          }' ${{ secrets.SLACK_WEBHOOK_URL }}
